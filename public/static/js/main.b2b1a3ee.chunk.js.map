{"version":3,"sources":["style/theme.js","style/global.js","ducks/auth.js","pages/HomePage.js","pages/PublicPage.js","containers/AuthContainer.js","App.js","serviceWorker.js","Store.js","index.js"],"names":["FONTS","GlobalStyle","createGlobalStyle","initialState","currentUser","reducer","state","action","type","user","HomePageWrapper","styled","section","HomePage","dispatch","useDispatch","useSelector","auth","email","href","className","to","onClick","axios","get","withCredentials","then","window","location","replace","catch","PublicPageWrapper","article","PublicPage","AuthContainer","this","props","checkCurrentUser","console","log","children","React","Component","connect","resp","data","err","App","exact","path","component","Boolean","hostname","match","reducers","rootReducer","combineReducers","ReactDOM","render","StrictMode","store","createStore","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8QAMMA,EACK,wBADLA,EAEE,wB,ubCLR,IAwBeC,EAxBKC,YAAH,IAEEF,EDFX,UCSWA,G,gCCRbG,EAAe,CACnBC,YAAa,MAGA,SAASC,IAA4C,IAApCC,EAAmC,uDAA3BH,EAAcI,EAAa,uDAAJ,GAC7D,OAAQA,EAAOC,MACb,IARgB,cASd,OAAO,2BACFF,GADL,IAEEF,YAAaG,EAAOE,OAGxB,QACE,OAAOH,G,oOCXb,IAAMI,EAAkBC,IAAOC,QAAV,KAYN,SAASC,IACtB,IAAMC,EAAWC,cACXX,EAAcY,aAAY,SAACV,GAAD,OAAWA,EAAMW,KAAKb,eAEtD,OACE,kBAACM,EAAD,KACE,oDACA,mDAAyBN,EAAYc,OACrC,uBAAGC,KAAK,SAASC,UAAU,mBAA3B,+BAIA,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,YAAlC,qBAIA,4BACED,UAAU,yBACVE,QAAS,WACPR,GDGD,SAACA,GAAD,OACLS,IACGC,IAAI,uBAAwB,CAAEC,iBAAiB,IAC/CC,MAAK,WACJC,OAAOC,SAASC,QAAQ,qBAEzBC,OAAM,WACLH,OAAOC,SAASC,QAAQ,0BCb1B,Y,wFC9BN,IAAME,EAAoBpB,IAAOqB,QAAV,KAIR,SAASC,IACtB,OACE,kBAACF,EAAD,KACE,2CACA,sFAEA,kBAAC,IAAD,CAAMV,GAAG,IAAID,UAAU,kCAAvB,c,oCCTAc,E,kLACiB,IAAD,EACwBC,KAAKC,MAAvChC,EADU,EACVA,YAAaiC,EADH,EACGA,iBACrBC,QAAQC,IAAInC,GACPA,GACHiC,M,+BAIM,IAAD,EAC2BF,KAAKC,MAA/BhC,EADD,EACCA,YAAaoC,EADd,EACcA,SAErB,OAAKpC,EAGI,kBAAC,IAAD,KAASoC,GAFT,S,GAbeC,IAAMC,WA0BnBC,eANS,SAACrC,GAAD,MAAY,CAAEF,YAAaE,EAAMW,KAAKb,gBAEnC,SAACU,GAAD,MAAe,CACxCuB,iBAAkB,kBAAMvB,GHFjB,SAACA,GAAD,OACLS,IACGC,IAAI,4BAA6B,CAAEC,iBAAiB,IACpDC,MAAK,SAACkB,GACLN,QAAQC,IAAI,6BAA8BK,EAAKC,KAAKpC,MACpDK,EATC,CAAEN,KApBS,cAoBUC,KASFmC,EAAKC,KAAKpC,UAE/BqB,OAAM,SAACgB,GACNR,QAAQC,IAAIO,GACZnB,OAAOC,SAASC,QAAQ,4BGJjBc,CAA6CT,GCb7Ca,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWjB,IACxC,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,IAAIC,UAAWrC,OCArBsC,QACW,cAA7BxB,OAAOC,SAASwB,UAEe,UAA7BzB,OAAOC,SAASwB,UAEhBzB,OAAOC,SAASwB,SAASC,MACvB,2D,oBCbNf,QAAQC,IAAIe,GAEZ,IAAMC,EAAcC,YAAgBF,GCKpCG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAUC,MDNC,WAA0C,IAAlBzD,EAAiB,uDAAJ,GACnD,OAAO0D,YACLN,EACApD,EACA2D,YAAgBC,MCEEC,IACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAINC,SAASC,eAAe,SF8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdzC,OAAM,SAAA0C,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.b2b1a3ee.chunk.js","sourcesContent":["const COLORS = {\n  primary: '#009bac',\n\n  text: '#3a3a3a',\n}\n\nconst FONTS = {\n  heading: \"'Raleway', sans-serif\",\n  body: \"'Raleway', sans-serif\",\n}\n\nexport { COLORS, FONTS }\n","import { createGlobalStyle } from 'styled-components'\nimport { COLORS, FONTS } from './theme'\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    font-family: ${FONTS.body};\n    font-weight: 400;\n    color: ${COLORS.text};\n    font-size: 17px;\n  }\n\n  h1, h2, h3, h4, h5, h6, blockquote {\n    font-family: ${FONTS.heading};\n    font-weight: 600;\n  }\n\n  blockquote {\n    font-style: italic;\n    text-align: unset;\n  }\n\n  * {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`\n\nexport default GlobalStyle\n","import axios from 'axios'\n\nconst UPDATE_USER = 'UPDATE_USER'\n\nconst initialState = {\n  currentUser: null,\n}\n\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case UPDATE_USER:\n      return {\n        ...state,\n        currentUser: action.user,\n      }\n\n    default:\n      return state\n  }\n}\n\nexport function updateUser(user) {\n  return { type: UPDATE_USER, user }\n}\n\nexport function getCurrentUser() {\n  return (dispatch) =>\n    axios\n      .get('/api/v1/current_user.json', { withCredentials: true })\n      .then((resp) => {\n        console.log('current_user from server: ', resp.data.user)\n        dispatch(updateUser(resp.data.user))\n      })\n      .catch((err) => {\n        console.log(err)\n        window.location.replace('/users/sign_in')\n      })\n}\n\nexport function signOut() {\n  return (dispatch) =>\n    axios\n      .get('/api/v1/log_out.json', { withCredentials: true })\n      .then(() => {\n        window.location.replace('/users/sign_in')\n      })\n      .catch(() => {\n        window.location.replace('/users/sign_in')\n      })\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { signOut } from '../ducks/auth'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst HomePageWrapper = styled.section`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding-top: 5%;\n\n  button, a {\n    margin: 5px;\n  }\n`\n\nexport default function HomePage() {\n  const dispatch = useDispatch()\n  const currentUser = useSelector((state) => state.auth.currentUser)\n\n  return (\n    <HomePageWrapper>\n      <h1>Welcome to Home Page</h1>\n      <p>You are logged in as {currentUser.email}</p>\n      <a href=\"/admin\" className=\"btn btn-warning\">\n        Go to ActiveAdmin dashboard\n      </a>\n\n      <Link className=\"btn btn-info\" to=\"/welcome\">\n        Visit Public Page\n      </Link>\n\n      <button\n        className=\"btn btn-outline-danger\"\n        onClick={() => {\n          dispatch(signOut())\n        }}\n      >\n        Log Out\n      </button>\n    </HomePageWrapper>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst PublicPageWrapper = styled.article`\n  padding: 1em;\n`\n\nexport default function PublicPage() {\n  return (\n    <PublicPageWrapper>\n      <h1>Public Page</h1>\n      <p>This page can be accessed by anyone without logging in.</p>\n\n      <Link to='/' className=\"btn btn-outline-primary btn-lg\">Enter App</Link>\n    </PublicPageWrapper>\n  )\n}","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Switch } from 'react-router'\nimport { getCurrentUser } from '../ducks/auth'\n\nclass AuthContainer extends React.Component {\n  componentDidMount() {\n    const { currentUser, checkCurrentUser } = this.props\n    console.log(currentUser)\n    if (!currentUser) {\n      checkCurrentUser()\n    }\n  }\n\n  render() {\n    const { currentUser, children } = this.props\n\n    if (!currentUser) {\n      return null\n    } else {\n      return <Switch>{children}</Switch>\n    }\n  }\n}\n\nconst mapStateToProps = (state) => ({ currentUser: state.auth.currentUser })\n\nconst mapDispatchToProps = (dispatch) => ({\n  checkCurrentUser: () => dispatch(getCurrentUser()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthContainer)\n","import React, { useEffect } from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport HomePage from './pages/HomePage'\nimport PublicPage from './pages/PublicPage'\nimport AuthContainer from './containers/AuthContainer'\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/welcome\" component={PublicPage} />\n      <AuthContainer>\n        <Route exact path=\"/\" component={HomePage} />\n      </AuthContainer>\n    </Switch>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { combineReducers } from 'redux';\nimport * as reducers from './ducks/index';\n\nconsole.log(reducers)\n\nconst rootReducer = combineReducers(reducers);\n\nexport default function configureStore(initialState={}) {\n return createStore(\n   rootReducer,\n   initialState,\n   applyMiddleware(thunk)\n );\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport GlobalStyle from './style/global'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './Store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <Provider store={configureStore()}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}